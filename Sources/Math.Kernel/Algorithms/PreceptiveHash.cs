using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using Math.Kernel.Algorithms;
using Math.Kernel.Algorithms.Transformations;
using Math.Kernel.NUnit;
using Newtonsoft.Json;
using NUnit.Framework;
using Unity;

namespace Math.Kernel.Algorithms
{
    public interface IPreceptiveHash
    {
        ulong ByArea(Color[,] colorsMatrix, int beginX, int beginY, int threshold);
        ulong Get(Color[,] colorsMatrix, int threshold);
        List<ulong> ByImage(Color[,] colorsMatrix, int threshold);
    }

    public class PreceptiveHash: IPreceptiveHash
    {
        public ulong ByArea(Color[,] colorsMatrix, int beginX, int beginY, int threshold)
        {
            ulong result = 0;
            var bitNumber = 0;
            var endX = beginX + 8;
            var endY = beginY + 8;
            for (var x = beginX; x < endX; x++)
            for (var y = beginY; y < endY; y++)
            {
                if (colorsMatrix[x, y].R >= threshold) result |= 1UL << bitNumber;
                bitNumber++;
            }
            return result;
        }

        public ulong Get(Color[,] colorsMatrix, int threshold)
        {
            return ByArea(colorsMatrix, 0, 0, threshold);
        }

        public List<ulong> ByImage(Color[,] colorsMatrix, int threshold)
        {
            var result = new List<ulong>();
            var width = colorsMatrix.GetLength(0);
            var height = colorsMatrix.GetLength(1);
            for (var x = 0; x < width; x += 8)
            for (var y = 0; y < height; y += 8)
            {
                var preceptiveHash = ByArea(colorsMatrix, x, y, threshold);
                result.Add(preceptiveHash);
            }
            return result;
        }
    }
}

namespace Tests
{
    public class PreceptiveHash : BaseMathKernelInstance<IPreceptiveHash>
    {
        public override void Init()
        {
            base.Init();
            OtcuBinarization = Container.Resolve<IOtcuBinarization>();
            TransformImages = Container.Resolve<ITransformImages>();
            ColorsMatrix = Container.Resolve<IColorsMatrix>();
        }

        [Test, TestCaseSource(nameof(GetTestPicturesForByArea))]
        public ulong ByArea(string pictureFileName)
        {
            using (var baseImage = DalContext.FindPictureByFileName(pictureFileName))
            using (var grayScale = TransformImages.GrayScale(baseImage, baseImage.Width, baseImage.Height))
            {
                var grayScaleColorMatrix = ColorsMatrix.Get(grayScale);
                var threshold = OtcuBinarization.CalcThreshold(grayScaleColorMatrix);
                return Instance.ByArea(grayScaleColorMatrix, 0, 0, threshold);
            }
        }

        [Test, TestCaseSource(nameof(GetTestPicturesForGet))]
        public ulong Get(string pictureFileName)
        {
            using (var baseImage = DalContext.FindPictureByFileName(pictureFileName))
            using (var grayScale = TransformImages.GrayScale(baseImage, 8, 8))
            {
                var grayScaleColorMatrix = ColorsMatrix.Get(grayScale);
                var threshold = OtcuBinarization.CalcThreshold(grayScaleColorMatrix);
                return Instance.Get(grayScaleColorMatrix, threshold);
            }
        }

        [Test, TestCaseSource(nameof(GetTestPicturesForByImage))]
        public string ByImage(string pictureFileName)
        {
            using (var baseImage = DalContext.FindPictureByFileName(pictureFileName))
            using (var grayScale = TransformImages.GrayScale(baseImage, 128, 128))
            {
                var grayScaleColorMatrix = ColorsMatrix.Get(grayScale);
                var threshold = OtcuBinarization.CalcThreshold(grayScaleColorMatrix);
                var result=Instance.ByImage(grayScaleColorMatrix, threshold);
                return JsonConvert.SerializeObject(result);
            }
        }

        public static IEnumerable GetTestPicturesForByArea()
        {
            return new List<TestCaseData>
            {
                new TestCaseData("figure7.bmp").Returns(0),
                new TestCaseData("picture6.bmp").Returns(18446744073709551615)
            };
        }

        public static IEnumerable GetTestPicturesForGet()
        {
            return new List<TestCaseData>
            {
                new TestCaseData("figure7.bmp").Returns(1764922612049471036),
                new TestCaseData("picture6.bmp").Returns(18446605268906147839)
            };
        }

        public static IEnumerable GetTestPicturesForByImage()
        {
            return new List<TestCaseData>
            {
                new TestCaseData("figure7.bmp").Returns(
                    "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13835058055282163712,220527810232451072,15031336960,16775168,3237937920,212171904581632,8655363230434066432,0,0,0,0,0,0,0,0,3485997767573110784,4413208800,0,0,0,0,0,32960,9277520992128598784,216172782113783808,0,0,0,0,0,6944762281393651712,4345695260,0,0,0,0,0,0,0,0,9277520992061099015,72057594037927936,0,0,0,0,217023821495408688,0,0,0,0,0,0,0,0,0,128,1159685751781589761,0,0,0,6944621822012850176,257,0,0,0,0,0,0,0,0,0,0,13889312633533771824,0,0,0,1157442903387152416,0,0,0,0,0,0,0,0,0,0,0,2155905152,217018310867353856,0,0,1736164148113840152,0,0,0,0,0,0,0,0,0,0,0,0,144680345676219139,0,0,3463285774757664792,0,0,0,0,0,0,0,0,0,0,0,0,72342380484952834,0,0,13853178420837494832,0,0,0,0,0,0,0,0,0,0,0,6935755359172722816,65793,0,0,8421568,289921437936976128,0,0,0,0,0,0,0,0,0,0,291634567502110816,0,0,0,0,9277626751738976268,72057594037927936,0,0,0,0,0,0,0,0,3485998044598501376,16974342,0,0,0,0,0,9277520992061359619,216172782113783808,0,0,0,0,0,0,4062458519876534272,4345695256,0,0,0,0,0,0,0,553521257478,13904896864920010752,1080863910568919040,0,0,8998192055486251008,861161889202176,198428,0,0,0,0,0,0,0,0,0,0,49406,65285,65520,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]"),
                new TestCaseData("picture6.bmp").Returns(
                    "[18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,9223372036854775807,27021597764222975,54324670505156607,9294582998315827199,18446744073709551615,18446744073709551097,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,11475031113051668479,18446742841175572479,18446497250008694783,17580081520888546063,18446744073709551584,18446744073709551615,18446744073709551360,16140901062332113144,18158337242861371391,17289318960868556799,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,2234279065831866367,17365598688163921919,18445613724080787407,18446744073709551615,18446744073709551615,18437613520576575475,18012707447696785407,18446744073709551615,18446744073709551615,4593565929354248095,11207715530628915700,17287049577475604479,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551487,16717361816786634624,18374403072018407679,2234771097268518911,9291199805365682175,9223372036854775807,4548103587690576379,18230289816619057151,18446744073709551615,18446744073709518719,15806875394167420507,11502067616745168847,18446737450802872319,18446744073709551615,18446744073709551615,18446744073709551615,17293821538310553599,14420371970510028281,18446674533877219070,18446744073709535485,18446744073709489921,18446744073709338782,9187131306817822495,17940362881090256124,18446744073709551615,18446744073709551615,18410573988166876155,14978937038284218271,18446744073608493823,18446744073709551615,18446744073709551615,16703639361916239871,8585900751153233009,17940362863842488544,14404763408144531455,11502158194944245759,15318067936426459135,18446461499221213183,18446532140695814015,18373838639789046009,18446744073709551615,18446744073709551615,18446744073709551615,7457801997856798695,18229723568130752511,18446744073709551615,18446744073709551615,2242545360129982463,167800077254270,11590520391108983032,11502156032654655391,14455601098253049759,18230288712795619070,11502087688221067159,14978866530484187633,18446744073709551358,18446744073709551615,18446744073709551615,18446744073709551615,17578666414945298279,18446744073709551358,18446744073709551615,18446744073709551615,18446743521793621791,72339069014638592,4511622216118485056,18228874749460779675,8158561979413492972,17941495391002164476,13780873570349432767,18446532485483918055,504676936660811775,72057594037927935,72057594037927935,16208455058906415103,10362677052024290299,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073694807811,18446744073709518718,14411518807585587198,18446744047687233776,17863510122532128755,8394073765933740189,436619915680546815,58720127,16711168,551915930496,11285633224504767479,18442187558468165519,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,9223371484943089663,17575138543965739163,95499596154798079,148371843451894897,18374263302167954272,216461979643873546,0,0,0,18084270879473727740,17437092232736800767,10304235947423694847,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,13807930488311988031,14399629662594597121,1095332793161818912,18212626162306713344,17436245042347176188,4141478215086456607,0,0,0,17941493176881571574,16715104781524221703,18446740714573774976,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709518655,18379022075677130753,1148106609910577923,18378878857265352190,18444741998326841076,18446743794777865019,9187201950427381760,18374403900871474240,18439922444824281344,18439971013350330338,18446602509565312975,4539914850540124414,18374405004694913023,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073701130111,18446744073709485822,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615]")
            };
        }
        protected IOtcuBinarization OtcuBinarization { get; set; }
        protected ITransformImages TransformImages { get; set; }
        protected IColorsMatrix ColorsMatrix { get; set; }
    }

}
